// #BFS Approach: [Accepted]
// https://leetcode.com/problems/sliding-puzzle/
// Language: C++

class Solution {
private:
    bool Done (vector<vector<short>> &A) {
        if (A[1][2] != 0) 
            return false;
        int piece = 1;
        for (int i = 0; i < 2; i++) 
            for (int j = 0; j < 3; j++) {
                if (i == 1 && j == 2) break;
                if (piece++ != A[i][j]) 
                    return false;
            }
        return true;
    }
    bool isValid (int &x, int &y) {
        return x >= 0 && x < 2 && y >= 0 && y < 3;
    }
public:
    int slidingPuzzle(vector<vector<int>>& board) {
        vector<vector<short>> puzzle(2, vector<short>(3));
        int start, end;
        for (int i = 0; i < 2; i++) 
            for (int j = 0; j < 3; j++) {
                if (board[i][j] == 0) 
                    start = i, end = j;
                puzzle[i][j] = board[i][j];
            }
        
        int x[] = {0, 1, 0, -1}, y[] = {1, 0, -1, 0};
        
        map<vector<vector<short>>, bool> M;
        M[puzzle] = true;
        queue<pair<vector<vector<short>>, pair<int, int>>> q;
        q.push ({puzzle, {start, end}});
        int steps = 0;
        while (!q.empty()) {
            int size = q.size();
            for (int pass = 0; pass < size; pass++) {
                auto t = q.front();
                q.pop();
                start = t.second.first, end = t.second.second;
                if (Done(t.first)) 
                    return steps;
                for (int k = 0; k < 4; k++) {
                    int new0 = start + x[k], new1 = end + y[k];
                    if (isValid(new0, new1)) {
                        std::swap (t.first[start][end], t.first[new0][new1]);
                        if (!M[t.first]) {
                            M[t.first] = true;
                            q.push({t.first, {new0, new1}});
                        }
                        std::swap (t.first[start][end], t.first[new0][new1]);
                    }
                }
            }
            steps++;
        }
        return -1;
    }
};
