class DisJointSet {
public:
    vector<int> rank, parent, size;
    DisJointSet (int n) {
        rank.resize (n + 1, 0);
        parent.resize (n + 1);
        size.resize (n + 1, 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }
    
    int FindUParent (int node) {
        if (node == parent[node]) 
            return node;
        else return parent[node] = FindUParent (parent[node]);
    }
    
    void UnionByRank (int u, int v) {
        int ulp_u = FindUParent (u);
        int ulp_v = FindUParent (v);
        if (ulp_u == ulp_v) 
            return;
        if (rank[ulp_u] < rank[ulp_v]) 
            parent[ulp_u] = v;
        else if (rank[ulp_v] < rank[ulp_u]) 
            parent[ulp_v] = u;
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
    
    void UnionBySize (int u, int v) {
        int ulp_u = FindUParent (u);
        int ulp_v = FindUParent (v);
        if (ulp_u == ulp_v) 
            return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
